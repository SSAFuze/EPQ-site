<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/EPQ-site/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/EPQ-site/" rel="alternate" type="text/html" /><updated>2020-03-09T10:30:40+00:00</updated><id>http://localhost:4000/EPQ-site/feed.xml</id><title type="html">I’m thinking of a name, I promise</title><subtitle>Hey welcome to my site! Not a lot is here at the moment, but I am adding stuff as I go along!</subtitle><entry><title type="html">Introduction to encryption</title><link href="http://localhost:4000/EPQ-site/2020/02/10/encryption.html" rel="alternate" type="text/html" title="Introduction to encryption" /><published>2020-02-10T00:00:00+00:00</published><updated>2020-02-10T00:00:00+00:00</updated><id>http://localhost:4000/EPQ-site/2020/02/10/encryption</id><content type="html" xml:base="http://localhost:4000/EPQ-site/2020/02/10/encryption.html">&lt;p&gt;In this article, we will explore the 3 main types of encryption and then look at some examples of them. The concepts will underpin everything you do online, so it’s vital we understand them.&lt;/p&gt;

&lt;p&gt;The first, and oldest, form of cryptography is symmetric cryptography. In this, only one key is used. This means you need to know the same secret that was used to encrypt the message in order to decipher it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ssafuze.github.io/EPQ-site/assets/symmetric.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are many examples of symmetric algorithms, from the early Caesar ciphers to the modern-day AES algorithm. AES is used widely today, including being used by the US government. We will now introduce a cryptographer’s best friend, &lt;a href=&quot;https://gchq.github.io/CyberChef/&quot;&gt;CyberChef&lt;/a&gt;. This is a versatile web tool which can be used to do a vast number of cryptography activities. You can make ‘recipes’ of cryptography algorithms which you can put values into. Now to try encrypting something using AES.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ssafuze.github.io/EPQ-site/assets/cyberchef_aes.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you can see that we have successfully encrypted a message, and now it looks nothing like what it did originally. To explain some of the options; they key is the secret that is needed to decrypt the message, the IV (Initialisation Vector) randomizes the output so you can use the same key and message but with different outputs. Then AES has different modes which encrypt the message in different ways, which I’d recommend researching if you are interested.&lt;/p&gt;

&lt;p&gt;The next type of encryption is asymmetric encryption. This instead involves two keys, one used to encrypt a message and one to decrypt it&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ssafuze.github.io/EPQ-site/assets/asymmetric.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is sometimes called public key cryptography. So, say Alice wants to send Bob a message that no one else can read. If we used symmetric cryptography, they’d have to find a way to share the key without anyone seeing it which is rather challenging. Asymmetric encryption fixes this key exchange issues. So, everyone has a ‘keypair’, a public key and a private key. These keys are related so if one is used to encrypt something, the other can decrypt it. So, in our scenario. Bob posts his public keys publicly. Therefore, anyone can encrypt a message with Bob’s public key. But the important thing is that only Bob has the private key, so only he can read these messages. And that’s asymmetric cryptography in a nutshell! A common example of this sort of cryptography is RSA. This algorithm is used widely today, and whilst I won’t discuss the details here, I’d highly suggest reading up on it &lt;a href=&quot;https://simple.wikipedia.org/wiki/RSA_algorithm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The 3rd type is hashing. However, I may have told a lie, as hashing isn’t exactly encryption. Encryption is a two-way thing. If you encrypt something, given the correct information (ie the key), you can decrypt it again. Hashing is a one-way function. You give this function an input, and it returns a fixed length output. Hashing has two common uses: verifying file integrity and protecting passwords. As a hash changes depending on the input, you can use this to compare two files and see if they are the same or not. Then they can protect passwords as they cannot be reversed, so when you enter a password, your input is hashed and compared to the existing hash.&lt;/p&gt;

&lt;p&gt;The final thing to talk about is how to ‘break’ an encryption algorithm. One of the most important things is Kerchoff’s principle. It states that any secure algorithm must be open to be viewed by all others. The reasoning is that any algorithm that relies on secrecy is flawed as it’s very possible someone will get hold of it. But if it remains secure even after people have audited it, it must be secure. To backtrack, secure just means that you can’t get the plaintext from the ciphertext. But when the algorithm is secure, it doesn’t mean you can relax. Attackers can use “side channel attacks”. So instead of attacking the algorithm, you attack how it’s implemented. This often attacks hardware implementations which inadvertently leak information.&lt;/p&gt;

&lt;p&gt;Hopefully you’ve learnt something from this! This was a quick tour but I would highly recommend researching anything here that sounds interesting in more depth.&lt;/p&gt;</content><author><name></name></author><summary type="html">In this article, we will explore the 3 main types of encryption and then look at some examples of them. The concepts will underpin everything you do online, so it’s vital we understand them.</summary></entry><entry><title type="html">How do passwords keep me safe?</title><link href="http://localhost:4000/EPQ-site/2020/01/19/passwords.html" rel="alternate" type="text/html" title="How do passwords keep me safe?" /><published>2020-01-19T00:00:00+00:00</published><updated>2020-01-19T00:00:00+00:00</updated><id>http://localhost:4000/EPQ-site/2020/01/19/passwords</id><content type="html" xml:base="http://localhost:4000/EPQ-site/2020/01/19/passwords.html">&lt;p&gt;Often, it seems like the only thing standing in between your valuable data and a malicious attacker is your password. But how can a small set of characters protect your data?&lt;/p&gt;

&lt;p&gt;Well, let’s talk about the obvious thing first. Passwords stop people accessing your account unless they know the password. Simple, problem solved. Well, not really. What’s to stop someone just filling the password form with every possible combination? Apart from this being time consuming for an attacker and very noisy, most modern sites use lockout thresholds. So, if you get your password wrong a certain amount of times, you either have to wait a certain amount of time before trying again or you may have to ask an IT person to let you back in.&lt;/p&gt;

&lt;p&gt;However, one of the more common methods attackers use is ‘password spraying’. This is where attackers take usernames/email addresses (we don’t normally keep these secret) and try a few common passwords on each of them. In some cases, such as an attacker trying to gain access to a corporate network, all it takes is one employee to use a weak password such as the dreaded ‘password’ and the attacker has access. The lesson here is to always avoid common passwords and choose longer, more complex ones.&lt;/p&gt;

&lt;p&gt;Another targeted tactic that attackers may use is leveraging password dumps. It is inevitable that some sites will be compromised, and user’s data including passwords may be leaked. Now, competent sites will have encrypted their user’s passwords using a secure hashing algorithm (post about this coming in the future!) such that it’s now useless to an attacker. But like anyone else, sometimes developers cut corners and store passwords in plaintext or used an insecure encryption algorithm. If they’ve done this and a hacker gains access, they probably have your password. You can even see if your password has been found in a password dump before using Have I Been Pwned (https://haveibeenpwned.com/Passwords); this site can also let you search for your email address to see if it has been found. The solution to this is to use different passwords for different accounts. But these may be hard to remember, which we can address later.&lt;/p&gt;

&lt;p&gt;Now for a quick taster of what hashing is. It’s a form of cryptography where it’s incredibly easy to go one way but impossible go back the other way. So, when you set a password, this password is hashed, and the output is stored. Then when you log in, the password you enter is hashed using the same algorithm – and they are compared. This can cause issues which will be discussed in a later post.&lt;/p&gt;

&lt;p&gt;This is probably as a good a time as any to introduce the infamous XKCD comic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ssafuze.github.io/EPQ-site/assets/password_strength.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is true because the only way to ‘crack’ a hashed password is to brute force it. This is achieved either by using a database of common passwords and their hashes or by just simply hashing all possible combinations until you find a match. Every character you add to a password exponentially increases the time required to crack it, which is why long passwords are considered good advice. Another layer of security can be added to hashed passwords by ‘salting’ them, something that will be covered elsewhere.&lt;/p&gt;

&lt;p&gt;But one of the best ways to protect an account is to employ a form of two factor authentication. Even if an attacker has your password, if they require a 2FA code sent via text or email, they can’t get access to your account.&lt;/p&gt;

&lt;p&gt;I hope you’ve learnt something here! Stay tuned for more posts on interesting topics.&lt;/p&gt;

&lt;p&gt;Extra resources:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://random-ize.com/how-long-to-hack-pass/&quot;&gt;Password strength checker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt&quot;&gt;Download link for the famous rockyou.txt, commonly used for trying to brute force passwords&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Often, it seems like the only thing standing in between your valuable data and a malicious attacker is your password. But how can a small set of characters protect your data?</summary></entry></feed>